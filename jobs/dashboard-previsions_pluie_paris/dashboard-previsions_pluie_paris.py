import dash
import dash_core_components as dcc
import dash_html_components as html
import plotly.graph_objs as go
import datetime as dt
import pyarrow.parquet as pq
import pandas as pd


input_df = pq.ParquetDataset("/data/tables/"
                             "meteo_agg/"
                             "ds=2017-11-24/").read().to_pandas()

print(input_df[:2])

app = dash.Dash()


def generate_table(dataframe, max_rows=100):
    return html.Table(
        # Header
        [html.Tr([html.Th(col) for col in dataframe.columns])] +

        # Body
        [html.Tr([
            html.Td(str(dataframe.iloc[i][col])) for col in dataframe.columns
        ]) for i in range(min(len(dataframe), max_rows))]
    )


def generate_date_picker():
    return dcc.DatePickerRange(
        id='my-date-picker-range',
        start_date=dt.date.today() - dt.timedelta(days=7),
        end_date=dt.date.today() + dt.timedelta(days=2),
        end_date_placeholder_text='Select a date!'
    )


default_config = dict(displaylogo=False,
                      modeBarButtonsToRemove=['sendDataToCloud'])

main_contents = [
    html.H1(children='Dashboard: previsions_pluie_paris'),
    html.P(children='generated by dsflow'),
    html.H3(children='Table meteo_agg'),
    generate_table(input_df),
    html.H3(children='Basic graph'),
    html.P(children='Select date'),
    generate_date_picker(),
    dcc.Graph(id='test-graph-1', config=default_config),
 ]

app.layout = html.Div(children=[
    html.Div([
        html.Div([
            html.Div(main_contents, className="row", style={'width': '80%'}),
        ], className="subpage", style={'padding': '40px'}),
    ], className="page")
])


@app.callback(
    dash.dependencies.Output('test-graph-1', 'figure'),
    [dash.dependencies.Input('my-date-picker-range', 'start_date'),
     dash.dependencies.Input('my-date-picker-range', 'end_date')])
def generate_graph_1(start_date, end_date):
    df = input_df.where((input_df["forecast_hour"] >= start_date)
                        & (input_df["forecast_hour"] <= end_date))
    return {
        'data': [
            go.Scatter(
                x=df["forecast_hour"],
                y=df["total_precipitation"],
                # text=df['example_column'],
                opacity=1,
                name="total_precipitation"
            )
        ],
        'layout': {
            'title': 'previsions_pluie_paris',
            'yaxis': {
                # 'tickformat': ',.0%',
                # 'range': [0,1]
            }
        }
    }


external_css = ["//cdnjs.cloudflare.com/ajax/libs/normalize/7.0.0/normalize.min.css",
                "//cdnjs.cloudflare.com/ajax/libs/skeleton/2.0.4/skeleton.min.css",
                "//fonts.googleapis.com/css?family=Raleway:400,300,600",
                "//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css",
                "//codepen.io/chriddyp/pen/bWLwgP.css"]

for css in external_css:
    app.css.append_css({"external_url": css})


if __name__ == '__main__':
    app.run_server(debug=True, host='0.0.0.0')